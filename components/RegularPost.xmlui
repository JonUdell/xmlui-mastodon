<Component name="RegularPost">
  <AppState id="toolsState" bucket="toolsState" />

  <!-- Reply indicator if this is a reply
  <Fragment when="{$props.item.in_reply_to_account_id}">
    <DataSource
      id="replyAccount-{$props.item.id}"
      url="{window.query}"
      method="POST"
      body="{window.lookupAccount($props.item.in_reply_to_account_id)}"
      onLoaded="(data) => {
        if (data && data.length > 0 && data[0].username) {
          window.accountCache[$props.item.in_reply_to_account_id] = data[0];
        }
      }"
    >
      <Text>
        Replying to: {replyAccount-{$props.item.id}.value && replyAccount-{$props.item.id}.value.length > 0 ? replyAccount-{$props.item.id}.value[0].display_name + ' (@' + replyAccount-{$props.item.id}.value[0].username + ')' : '...'}
      </Text>
    </DataSource>
  </Fragment>
-->

  <!-- Regular post header with timestamp on its own line -->
  <VStack gap="{toolsState.value.displayMode === 'minimal' ? '$space-0' : toolsState.value.displayMode === 'compact' ? '$space-1' : '$space-1'}">
    <!-- Debug info -->
    <VStack when="{$props.debugMode}" gap="$space-0_5">
      <Text variant="caption" fontSize="0.7rem" color="$color-text-subtle" fontFamily="monospace">
        Post ID: {$props.item.id}
      </Text>
      <Text when="{$props.item.media_type}" variant="caption" fontSize="0.7rem" color="$color-text-subtle" fontFamily="monospace">
        Media: {$props.item.media_type} | Preview: {$props.item.preview_url ? 'Yes' : 'No'} | Original: {$props.item.media_url ? 'Yes' : 'No'}
      </Text>
    </VStack>

    <!-- Timestamp line -->
    <Text variant="caption" fontSize="{toolsState.value.displayMode === 'normal' ? '0.75rem' : '0.7rem'}" color="$color-text-subtle">
      {formatHumanElapsedTime($props.item.created_at)}
    </Text>

    <!-- Avatar and user info line -->
    <HStack gap="{toolsState.value.displayMode === 'minimal' ? '$space-1' : toolsState.value.displayMode === 'compact' ? '$space-1' : '$space-2'}">
      <MastodonAvatar
        when="{toolsState.value.displayMode === 'normal'}"
        url="{$props.item.avatar_url}"
        size="xs"
        name="{window.getDisplayName($props.item)}"
        item="{$props.item}"
      />
      <HStack gap="{toolsState.value.displayMode === 'minimal' ? '$space-1' : toolsState.value.displayMode === 'compact' ? '$space-1' : '$space-2'}">
        <Text variant="strong" fontSize="{toolsState.value.displayMode === 'normal' ? '0.75rem' : '0.7rem'}">{window.getDisplayName($props.item)}</Text>
        <Text variant="caption" fontSize="{toolsState.value.displayMode === 'normal' ? '0.75rem' : '0.65rem'}">@{window.getUsername($props.item)}</Text>
      </HStack>
    </HStack>

    <!-- Content section -->
    <Fragment when="{$props.item.content}">
      <Theme
        when="{toolsState.value.displayMode === 'minimal'}"
        marginTop-Text-markdown="$space-0"
        marginBottom-Text-markdown="$space-0"
        paddingTop-Markdown="$space-0"
        paddingBottom-Markdown="$space-0"
        marginTop-Blockquote="$space-0"
        marginBottom-Blockquote="$space-0"
        paddingTop-Blockquote="$space-0"
        paddingBottom-Blockquote="$space-0"
        paddingHorizontal-Blockquote="$space-2"
      >
        <Markdown content="{$props.item.content}" />
      </Theme>

      <Theme
        when="{toolsState.value.displayMode === 'compact'}"
        marginTop-Text-markdown="$space-1"
        marginBottom-Text-markdown="$space-2"
        paddingTop-Markdown="$space-0"
        paddingBottom-Markdown="$space-0"
        marginTop-Blockquote="$space-2"
        marginBottom-Blockquote="$space-2"
        paddingTop-Blockquote="$space-1"
        paddingBottom-Blockquote="$space-1"
        paddingHorizontal-Blockquote="$space-3"
      >
        <Markdown content="{$props.item.content}" />
      </Theme>

      <Theme
        when="{toolsState.value.displayMode === 'normal'}"
        marginTop-Text-markdown="$space-1"
        marginBottom-Text-markdown="$space-2"
        paddingTop-Markdown="$space-0"
        paddingBottom-Markdown="$space-0"
        marginTop-Blockquote="$space-2"
        marginBottom-Blockquote="$space-2"
        paddingTop-Blockquote="$space-1"
        paddingBottom-Blockquote="$space-1"
        paddingHorizontal-Blockquote="$space-3"
      >
        <Markdown content="{$props.item.content}" />
      </Theme>
    </Fragment>

    <ImageWithModal
      when="{$props.item.preview_url && (toolsState.value.displayMode === 'compact' || toolsState.value.displayMode === 'normal')}"
      src="{$props.item.preview_url}"
      mediaUrl="{$props.item.media_url}"
      mediaType="{$props.item.media_type}"
      width="{toolsState.value.zoom}%"
    />

    <Reactions
      item="{$props.item}"
      spacing="{toolsState.value.displayMode === 'minimal' ? '$space-1' : toolsState.value.displayMode === 'compact' ? '$space-3' : '$space-4'}"
    />
  </VStack>
</Component>
