<Component name="RegularPost">
  <AppState id="toolsState" bucket="toolsState" />

  <!-- Reply indicator if this is a reply
  <Fragment when="{$props.item.in_reply_to_account_id}">
    <DataSource
      id="replyAccount-{$props.item.id}"
      url="{window.query}"
      method="POST"
      body="{window.lookupAccount($props.item.in_reply_to_account_id)}"
      onLoaded="(data) => {
        if (data && data.length > 0 && data[0].username) {
          window.accountCache[$props.item.in_reply_to_account_id] = data[0];
        }
      }"
    >
      <Text>
        Replying to: {replyAccount-{$props.item.id}.value && replyAccount-{$props.item.id}.value.length > 0 ? replyAccount-{$props.item.id}.value[0].display_name + ' (@' + replyAccount-{$props.item.id}.value[0].username + ')' : '...'}
      </Text>
    </DataSource>
  </Fragment>
-->

  <!-- Regular post header with timestamp on its own line -->
  <VStack gap="$space-0_5">
    <!-- Timestamp line -->
    <Text fontSize="$fontSize-xs">
      {formatHumanElapsedTime($props.item.created_at)}
    </Text>

    <!-- Avatar and user info line -->
    <HStack gap="$space-2">
      <MastodonAvatar
        url="{$props.item.avatar_url}"
        size="xs"
        name="{window.getDisplayName($props.item)}"
        item="{$props.item}"
      />
      <HStack gap="$space-2">
        <Text fontSize="$fontSize-xs">{window.getDisplayName($props.item)}</Text>
        <Text fontSize="$fontSize-xs">@{window.getUsername($props.item)}</Text>
      </HStack>
    </HStack>

    <!-- Content section -->
    <Fragment when="{$props.item.content}">
      <Theme
        lineHeight-Text="1.2"
        marginTop-Text-markdown="$space-1"
        marginBottom-Text-markdown="$space-2"
        paddingTop-Markdown="$space-0"
        paddingBottom-Markdown="$space-0"
        marginTop-Blockquote="$space-2"
        marginBottom-Blockquote="$space-2"
        paddingTop-Blockquote="$space-1"
        paddingBottom-Blockquote="$space-1"
        paddingHorizontal-Blockquote="$space-3"
      >
        <Markdown content="{window.htmlToMarkdown($props.item.content)}" />
      </Theme>
    </Fragment>

    <ImageWithModal
      when="{$props.item.preview_url}"
      src="{$props.item.preview_url}"
      mediaUrl="{$props.item.media_url}"
      mediaType="{$props.item.media_type}"
      width="{toolsState.value.zoom}%"
    />

    <Reactions item="{$props.item}" />
  </VStack>
</Component>
