<Component
    name="Compose"
    var.postContent=""
    var.isPublishing="{false}"
    var.publishStatus=""
    var.currentLength="{0}"
    var.visibility="direct">
    <!-- APICall component for publishing posts -->
    <APICall
        id="publishPostAPI"
        method="post"
        url="{window.config.server}/api/v1/statuses"
        headers="{{
            'Authorization': `Bearer ${window.config.mastodonToken}`,
            'Content-Type': 'application/json'
        }}"
        body="{{
            status: postContent.trim(),
            visibility: visibility
        }}"
        completedNotificationMessage="Post published successfully!"
        errorNotificationMessage="Failed to publish post: {$error.details || $error.message}"
        inProgressNotificationMessage="Publishing post...">
        <event name="beforeRequest">
            isPublishing = true;
            publishStatus = '';

            // Validate content before sending
            if (!postContent || postContent.trim().length === 0) {
                publishStatus = 'Post content cannot be empty';
                isPublishing = false;
                return false; // Prevent request
            }

            if (postContent.length > 500) {
                publishStatus = 'Post content exceeds 500 character limit';
                isPublishing = false;
                return false; // Prevent request
            }
        </event>
        <event name="success">
            isPublishing = false;
            publishStatus = 'Post published successfully!';
            postContent = '';
            postTextArea.value = '';
            currentLength = 0;
        </event>
        <event name="error">
            isPublishing = false;
            console.error('Publish error:', $error);
            publishStatus = `Error: ${$error.message || $error.error || JSON.stringify($error)}`;
        </event>
    </APICall>
    <!-- Post composition area -->
    <VStack gap="$space-2">
        <!-- Text input and controls aligned to the right -->
        <VStack gap="$space-2" horizontalAlignment="end" width="100%">
            <!-- Text input area -->
            <TextArea
                id="postTextArea"
                placeholder="What's on your mind?"
                autoFocus="true"
                autoSize="true"
                minRows="3"
                maxRows="10"
                width="100%"
                onDidChange="postContent = postTextArea.value || ''"
                value="{postContent}" />
            <!-- Visibility selector and character counter -->
            <HStack width="100%" gap="$space-2" verticalAlignment="center">
                <Theme fontSize="$fontsize-sm" padding-Select="$space-1_5">
                    <Select
                        id="visibilitySelect"
                        initialValue="direct"
                        placeholder="Visibility"
                        onDidChange="(newValue) => visibility = newValue"
                        width="180px"
                        >
                        <property name="optionTemplate">
                            <Text fontSize="$fontSize-sm">
                                {$item.label}
                            </Text>
                        </property>
                        <Option value="public" label="Public" />
                        <Option value="unlisted" label="Unlisted" />
                        <Option value="private" label="Followers only" />
                        <Option value="direct" label="Direct message" />
                    </Select>
                </Theme>
                <SpaceFiller />
                <HStack gap="$space-1">
                    <Text
                        variant="caption"
                        color="{(postTextArea.value ? postTextArea.value.length : 0) > 500 ? '$color-danger' : '$textColor-subtitle'}"
                        fontWeight="{(postTextArea.value ? postTextArea.value.length : 0) > 500 ? 'bold' : 'normal'}">
                        {postTextArea.value ? postTextArea.value.length : 0}
                    </Text>
                    <Text variant="caption" color="$textColor-subtitle">
                        / 500
                    </Text>
                </HStack>
            </HStack>
            <!-- Info sections -->
            <VStack width="100%" fontSize="$fontSize-xs" gap="$space-1">
                <ExpandableItem summary="Supported markdown formatting">
                    <VStack gap="$space-1" paddingTop="$space-1">
                        <VStack gap="$space-0_5">
                            <Text>
                                **bold** - Bold text
                            </Text>
                            <Text>
                                *italic* - Italic text
                            </Text>
                            <Text>
                                ***bold italic*** - Bold and italic
                            </Text>
                            <Text>
                                `inline code` - Code with background
                            </Text>
                            <Text>
                                ```code block``` - Multi-line code
                            </Text>
                            <Text>
                                https://example.com - Auto-linked URLs
                            </Text>
                        </VStack>
                        <Image
                            src="/resources/supported-markdown.png"
                            width="100%" />
                        <Text variant="strong">
                            Note: Headings (#), lists, and --- do not format
                        </Text>
                    </VStack>
                </ExpandableItem>
                <ExpandableItem summary="About post visibility">
                    <VStack gap="$space-0_5" paddingTop="$space-1">
                        <Text>
                            Public: Everyone can see. Appears in timelines.
                        </Text>
                        <Text>
                            Unlisted: Everyone can see. Not in public timelines.
                        </Text>
                        <Text>
                            Followers only: Only followers and mentioned users.
                        </Text>
                        <Text>
                            Direct message: Only mentioned users. Private.
                        </Text>
                    </VStack>
                </ExpandableItem>
            </VStack>
            <!-- Status message -->
            <Text
                when="{publishStatus}"
                variant="caption"
                color="{publishStatus.includes('Error') || publishStatus.includes('cannot') || publishStatus.includes('exceeds') ? '$color-danger' : '$color-success'}">
                {publishStatus}
            </Text>
            <!-- Publish button -->
            <Button
                label="{isPublishing ? 'Publishing...' : 'Publish Post'}"
                onClick="{
                    postContent = postTextArea.value;
                    publishPostAPI.execute();
                }"
                enabled="{!isPublishing && (postTextArea.value ? postTextArea.value.length : 0) > 0 && (postTextArea.value ? postTextArea.value.length : 0) <= 500}" />
        </VStack>
    </VStack>
</Component>