<Component name="Home"
  var.imageZoom="{20}"
>
  <AppState id="initialLoadState" bucket="initialLoad" initialValue="{ { loaded: false } }" />

  <AppState id="toolsState" bucket="toolsState" initialValue="{ { zoom: 20 } }" />

  <APICall
    id="updateTootsHome"
    method="post"
    url="{window.query}"
    body="{{ sql: window.updateTootsHome }}"
  />


  <DataSource
    id="tootsHome"
    url="{ window.query }"
    body="{ window.tootsHome(100) }"
    method="POST"
    onLoaded="
    if (!initialLoadState.value.loaded) {
      initialLoadState.update({ loaded: true });
      updateTootsHome.execute()
    }
  "
  />

  <!--
  <DataSource
    id="testAccount"
    url="{ window.query }"
    method="POST"
    body="{ window.lookupAccount('112844462759994990') }"
    onLoaded="(data) => {
      if (data && data.length > 0 && data[0].username) {
        window.accountCache['112844462759994990'] = data[0];
      }
    }"
    completedNotificationMessage="lookupAccount test"
  >
    <Text>Account info: {testAccount.value && testAccount.value.length > 0 && testAccount.value[0].username ? JSON.stringify(testAccount.value[0]) : 'Loading...'}</Text>
  </DataSource>

  <Text>accountCache: { JSON.stringify(window.accountCache) } </Text>
  -->

  <VStack>

    <HStack>

      <VStack>
        <Icon name="cog" size="md" onClick="settingsDialog.open()" style="cursor:pointer" />
      </VStack>

      <SpaceFiller/>

      <VStack width="90%" maxWidth="90vw" marginRight="$space-4">
        <ModalDialog
          id="settingsDialog"
          title="Settings"
          width="50%"
        >
          <Tools />
        </ModalDialog>

        <Items data="{tootsHome}">
          <VStack>
            <!-- Regular Post Display -->
            <Fragment when="{!$item.reblog}">
              <!-- Reply indicator if this is a reply -->
              <Fragment when="{$item.in_reply_to_account_id}">
                <DataSource
                  id="replyAccount-{$item.id}"
                  url="{window.query}"
                  method="POST"
                  body="{window.lookupAccount($item.in_reply_to_account_id)}"
                  onLoaded="(data) => {
                    if (data && data.length > 0 && data[0].username) {
                      window.accountCache[$item.in_reply_to_account_id] = data[0];
                    }
                  }"
                >
                  <Text>
                    Replying to: {replyAccount-{$item.id}.value && replyAccount-{$item.id}.value.length > 0 ? replyAccount-{$item.id}.value[0].display_name + ' (@' + replyAccount-{$item.id}.value[0].username + ')' : '...'}
                  </Text>
                </DataSource>
              </Fragment>

              <HStack>
                <MastodonAvatar
                  url="{$item.avatar_url}"
                  size="xs"
                  name="{window.getDisplayName($item)}"
                  item="{$item}"
                />
                <HStack gap="0.5rem">
                  <Text variant="strong">{window.getDisplayName($item)}</Text>
                  <Text variant="caption">@{window.getUsername($item)}</Text>
                </HStack>
                <SpaceFiller />
                <Text variant="caption">{window.getCreatedDate($item)}</Text>
              </HStack>

              <VStack>
                <Fragment when="{$item.content}">
                  <Markdown content="{$item.content}" />
                </Fragment>

                <!--
              <Fragment
                when="{$item.status ? ($item.status.media_attachments ? $item.status.media_attachments.length > 0 :
              false) : false}">
                <Text variant="caption">üñºÔ∏è {$item.status.media_attachments.length} media</Text>
              </Fragment>
              -->

                <Fragment when="{$item.preview_url}">
                  <VStack alignItems="start">
                    <Image src="{$item.preview_url}" width="{toolsState.value.zoom}%" />
                  </VStack>
                </Fragment>

              </VStack>
            </Fragment>

            <!-- Reblog Display -->
            <Fragment when="{$item.reblog}">
              <!-- Combined reblogger and original author info in a single row -->
              <HStack verticalAlignment="center" gap="0.5rem">
                <MastodonAvatar
                  url="{$item.avatar_url}"
                  size="xs"
                  name="{window.getDisplayName($item)}"
                  item="{$item}"
                />
                <Text variant="caption">{window.getDisplayName($item)}</Text>
                <CHStack border="1px solid $color-surface-300" borderRadius="50%" width="1.4rem"
                  height="1.4rem">
                  <Icon name="arrowright" size="md" />
                </CHStack>
                <MastodonAvatar
                  url="{$item.reblog_avatar_url}"
                  size="xs"
                  name="{window.getReblogDisplayName($item)}"
                  item="{$item}"
                />
                <HStack gap="0.5rem">
                  <Text variant="strong">{window.getReblogDisplayName($item)}</Text>
                  <Text variant="caption">@{window.getReblogUsername($item)}</Text>
                </HStack>
                <SpaceFiller />
                <Text variant="caption">{window.getReblogCreatedDate($item)}</Text>

              </HStack>

              <!-- Original content -->
              <VStack marginLeft="0.5rem" backgroundColor="$color-surface-100" padding="$space-4"
                borderRadius="0.25rem">
                <Markdown content="{$item.reblog_content}" />

                <Fragment
                  when="{$item.reblog.media_attachments ? $item.reblog.media_attachments.length > 0 : false}">
                  <Text variant="caption">üñºÔ∏è {$item.reblog.media_attachments.length} media</Text>
                </Fragment>
              </VStack>

              <Fragment when="{$item.reblog_preview_url}">
                <VStack maxWidth="800px" alignItems="start">
                  <Image src="{$item.reblog_preview_url}" width="{toolsState.value.zoom}%" />
                </VStack>
              </Fragment>

            </Fragment>

            <!-- Reactions - same for both types -->
            <HStack verticalAlignment="center" gap="0.75rem">
              <HStack verticalAlignment="center" gap="0.25rem">
                <CHStack border="1px solid $color-surface-300" borderRadius="50%" width="1.4rem"
                  height="1.4rem">
                  <Icon name="reply" size="sm" />
                </CHStack>
                <Text variant="caption">{$item.replies_count || 0}</Text>
              </HStack>
              <HStack verticalAlignment="center" gap="0.25rem">
                <CHStack border="1px solid $color-surface-300" borderRadius="50%" width="1.4rem"
                  height="1.4rem">
                  <Icon name="trending-up" size="sm" />
                </CHStack>
                <Text variant="caption">{$item.reblogs_count || 0}</Text>
              </HStack>
              <HStack verticalAlignment="center" gap="0.25rem">
                <CHStack border="1px solid $color-surface-300" borderRadius="50%" width="1.4rem"
                  height="1.4rem">
                  <Icon name="like" size="sm" />
                </CHStack>
                <Text variant="caption">{$item.favourites_count || 0}</Text>
              </HStack>
            </HStack>
          </VStack>


          <ContentSeparator />
        </Items>

      </VStack>

    </HStack>

  </VStack>

</Component>